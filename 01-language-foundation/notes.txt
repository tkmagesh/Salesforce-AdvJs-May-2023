
Implicit values in a function when invoked
    - arguments
        * array like object with all the argument values passed to the function
        * arguments.length => # of arguments
        * arguments[0], arguments[1].....
        
    - this

It DOES NOT matter where a function is OR it DOES NOT matter who owns a function
    What matters is HOW the function is invoked

Functions are objects

    1.Creation (function statement)
    function fn(){

    }


    2.Creation (function expression)
    var fn = function(){}


    3.Functions can have attributes (like objects)
    fn['id']= 100
    fn.id
    
    4.Functions can have methods (like objects)
    fn['print'] = function(){
        console.log('i am a function');
    }
    fn.print()

    5.Builtin methods of functions
        - apply()
        - bind()
        - call()

Function Invocation Patterns
    1. As a method of an object (obj)
        this => obj

        var emp = {
            name : 'Magesh',
            whoAmI : function(){
                console.log('I am ', this.name);
            }
        }
        emp.whoAmI()



    2. As a function
        this => global scope (window)
        function fn(){

        }
        fn()
        
    3. Using the 'call' method of the function
        var emp = {
            name : 'Magesh'
        }
        function greet(salutation, message){
            console.log(salutation + this.name + ', ' + message)
        }
        greet.call(emp, 'Mr.', 'Have a nice day!')

    4. Using the 'apply' method of the function
        var emp = {
            name : 'Magesh'
        }
        function greet(salutation, message){
            console.log(salutation + this.name + ', ' + message)
        }
        greet.call(emp, ['Mr.', 'Have a nice day!'])
        
    5. As an 'Immediately Invoked Function Expression' (IIFE)
        
        (function fn(){
            console.log('fn invoked');
        })()

        (function add(x,y){
            return x + y;
        })(100,200)

    6. Using the 'new' keyword

